// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using BalatroWikiApp.Data;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;

namespace BalatroWikiApp.Models;

public partial class BalatroDBContext : IdentityDbContext<ApplicationUser>
{
    public BalatroDBContext(DbContextOptions<BalatroDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Blind> Blinds { get; set; }

    public virtual DbSet<Boosterpack> Boosterpacks { get; set; }

    public virtual DbSet<Card> Cards { get; set; }

    public virtual DbSet<Deck> Decks { get; set; }

    public virtual DbSet<Edition> Editions { get; set; }

    public virtual DbSet<Enhancedcard> Enhancedcards { get; set; }

    public virtual DbSet<Joker> Jokers { get; set; }

    public virtual DbSet<Planetcard> Planetcards { get; set; }

    public virtual DbSet<Seal> Seals { get; set; }

    public virtual DbSet<Spectralcard> Spectralcards { get; set; }

    public virtual DbSet<Sticker> Stickers { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<Tarotcard> Tarotcards { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Blind>(entity =>
        {
            entity.HasKey(e => e.IdBlind).HasName("PRIMARY");

            entity
                .ToTable("blinds")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdBlind).HasColumnName("idBlind");
            entity.Property(e => e.AnteBlind).HasColumnName("anteBlind");
            entity.Property(e => e.DescriptionBlind)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("descriptionBlind");
            entity.Property(e => e.EffectBlind)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("effectBlind");
            entity.Property(e => e.NameBlind)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nameBlind");
            entity.Property(e => e.RewardBlind).HasColumnName("rewardBlind");
        });

        modelBuilder.Entity<Boosterpack>(entity =>
        {
            entity.HasKey(e => new { e.IdJoker, e.IdTarot, e.IdSpectral, e.NumCard })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity
                .ToTable("boosterpack")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            // entity.HasIndex(e => e.IdJoker, "fk_joker");

            entity.HasIndex(e => e.NumCard, "fk_card");

            entity.HasIndex(e => e.IdSpectral, "fk_spectral");

            entity.HasIndex(e => e.IdTarot, "fk_tarot");

            entity.Property(e => e.IdJoker).HasColumnName("idJoker");
            entity.Property(e => e.IdTarot).HasColumnName("idTarot");
            entity.Property(e => e.IdSpectral).HasColumnName("idSpectral");
            entity.Property(e => e.NumCard).HasColumnName("numCard");
            entity.Property(e => e.DescriptionPack)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("descriptionPack");
            entity.Property(e => e.NamePack)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("namePack");
            entity.Property(e => e.NumberChoices).HasColumnName("numberChoices");
            entity.Property(e => e.NumberPack).HasColumnName("numberPack");
            entity.Property(e => e.NumberProposition).HasColumnName("numberProposition");
            entity.Property(e => e.PricePack).HasColumnName("pricePack");

            entity.HasOne(d => d.IdJokerNavigation).WithMany(p => p.Boosterpacks)
                .HasForeignKey(d => d.IdJoker)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_joker");

            entity.HasOne(d => d.IdSpectralNavigation).WithMany(p => p.Boosterpacks)
                .HasForeignKey(d => d.IdSpectral)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_spectral");

            entity.HasOne(d => d.IdTarotNavigation).WithMany(p => p.Boosterpacks)
                .HasForeignKey(d => d.IdTarot)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tarot");

            entity.HasOne(d => d.NumCardNavigation).WithMany(p => p.Boosterpacks)
                .HasForeignKey(d => d.NumCard)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_card");
        });

        modelBuilder.Entity<Card>(entity =>
        {
            entity.HasKey(e => e.NumCard).HasName("PRIMARY");

            entity
                .ToTable("cards")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.NumCard).HasColumnName("numCard");
            entity.Property(e => e.FamilyCard)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("familyCard");
            entity.Property(e => e.IsEnhanced).HasColumnName("isEnhanced");
            entity.Property(e => e.NameCard)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nameCard");
        });

        modelBuilder.Entity<Deck>(entity =>
        {
            entity.HasKey(e => e.IdDeck).HasName("PRIMARY");

            entity
                .ToTable("decks")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdDeck).HasColumnName("idDeck");
            entity.Property(e => e.DescriptionDeck)
                .HasMaxLength(200)
                .HasColumnName("descriptionDeck");
            entity.Property(e => e.NameDeck)
                .HasMaxLength(50)
                .HasColumnName("nameDeck");
        });

        modelBuilder.Entity<Edition>(entity =>
        {
            entity.HasKey(e => e.IdEdition).HasName("PRIMARY");

            entity
                .ToTable("editions")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdEdition).HasColumnName("idEdition");
            entity.Property(e => e.EffectEdition)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("effectEdition");
            entity.Property(e => e.NameEdition)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nameEdition");
        });

        modelBuilder.Entity<Enhancedcard>(entity =>
        {
            entity.HasKey(e => e.IdEnhanced).HasName("PRIMARY");

            entity
                .ToTable("enhancedcards")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdEnhanced).HasColumnName("idEnhanced");
            entity.Property(e => e.EffectEnhanced)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("effectEnhanced");
            entity.Property(e => e.NameEnhanced)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nameEnhanced");
            entity.Property(e => e.TypeEnhanced)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("typeEnhanced");
        });

        modelBuilder.Entity<Joker>(entity =>
        {
            entity.HasKey(e => e.IdJoker).HasName("PRIMARY");

            entity
                .ToTable("jokers")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdJoker).HasColumnName("idJoker");
            entity.Property(e => e.DescriptionJoker)
                .HasMaxLength(200)
                .HasColumnName("descriptionJoker");
            entity.Property(e => e.HasFaceJoker).HasColumnName("hasFaceJoker");
            entity.Property(e => e.NameJoker)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("nameJoker");
            entity.Property(e => e.PriceJoker).HasColumnName("priceJoker");
            entity.Property(e => e.RarityJoker)
                .IsRequired()
                .HasMaxLength(30)
                .HasColumnName("rarityJoker");
            entity.Property(e => e.SizeJoker)
                .HasPrecision(3, 2)
                .HasColumnName("sizeJoker");
            entity.Property(e => e.TypeJoker)
                .HasMaxLength(20)
                .HasColumnName("typeJoker");
        });

        modelBuilder.Entity<Planetcard>(entity =>
        {
            entity.HasKey(e => e.IdPlanet).HasName("PRIMARY");

            entity
                .ToTable("planetcard")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdPlanet).HasColumnName("idPlanet");
            entity.Property(e => e.HandPlanet)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("handPlanet");
            entity.Property(e => e.NamePlanet)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("namePlanet");
        });

        modelBuilder.Entity<Seal>(entity =>
        {
            entity.HasKey(e => e.IdSeal).HasName("PRIMARY");

            entity
                .ToTable("seals")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdSeal).HasColumnName("idSeal");
            entity.Property(e => e.EffectSeal)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("effectSeal");
            entity.Property(e => e.NameSeal)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("nameSeal");
            entity.Property(e => e.TypeSeal)
                .IsRequired()
                .HasMaxLength(20)
                .HasColumnName("typeSeal");
        });

        modelBuilder.Entity<Spectralcard>(entity =>
        {
            entity.HasKey(e => e.IdSpectral).HasName("PRIMARY");

            entity
                .ToTable("spectralcard")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdSpectral).HasColumnName("idSpectral");
            entity.Property(e => e.EffectSpectral)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("effectSpectral");
            entity.Property(e => e.NameSpectral)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nameSpectral");
        });

        modelBuilder.Entity<Sticker>(entity =>
        {
            entity.HasKey(e => e.IdSticker).HasName("PRIMARY");

            entity
                .ToTable("sticker")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdSticker).HasColumnName("idSticker");
            entity.Property(e => e.DescriptionSticker)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("descriptionSticker");
            entity.Property(e => e.EffectSticker)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("effectSticker");
            entity.Property(e => e.NameSticker)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nameSticker");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.IdTag).HasName("PRIMARY");

            entity
                .ToTable("tags")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdTag).HasColumnName("idTag");
            entity.Property(e => e.EffectTag)
                .IsRequired()
                .HasMaxLength(200)
                .HasColumnName("effectTag");
            entity.Property(e => e.NameTag)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nameTag");
        });

        modelBuilder.Entity<Tarotcard>(entity =>
        {
            entity.HasKey(e => e.IdTarot).HasName("PRIMARY");

            entity
                .ToTable("tarotcard")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdTarot).HasColumnName("idTarot");
            entity.Property(e => e.EffectTarot)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("effectTarot");
            entity.Property(e => e.NameTarot)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nameTarot");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.IdVoucher).HasName("PRIMARY");

            entity
                .ToTable("vouchers")
                .HasCharSet("utf8mb3")
                .UseCollation("utf8mb3_general_ci");

            entity.Property(e => e.IdVoucher).HasColumnName("idVoucher");
            entity.Property(e => e.DescriptionVoucher)
                .IsRequired() 
                .HasMaxLength(200)
                .HasColumnName("descriptionVoucher");
            entity.Property(e => e.NameVoucher)
                .IsRequired()
                .HasMaxLength(50)
                .HasColumnName("nameVoucher");
            entity.Property(e => e.PriceVoucher).HasColumnName("priceVoucher");
            entity.Property(e => e.StateVoucher).HasColumnName("stateVoucher");


        });

        OnModelCreatingPartial(modelBuilder);

        base.OnModelCreating(modelBuilder); 
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}