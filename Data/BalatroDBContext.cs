// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using BalatroWikiApp.Data;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace BalatroWikiApp.Models;

public partial class BalatroDBContext : IdentityDbContext<ApplicationUser>
{
    public BalatroDBContext(DbContextOptions<BalatroDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Blind> Blinds { get; set; }

    public virtual DbSet<Boosterpack> Boosterpacks { get; set; }

    public virtual DbSet<Card> Cards { get; set; }

    public virtual DbSet<Deck> Decks { get; set; }

    public virtual DbSet<Edition> Editions { get; set; }

    public virtual DbSet<Enhancedcard> Enhancedcards { get; set; }

    public virtual DbSet<Joker> Jokers { get; set; }

    public virtual DbSet<Planetcard> Planetcards { get; set; }

    public virtual DbSet<Seal> Seals { get; set; }

    public virtual DbSet<Spectralcard> Spectralcards { get; set; }

    public virtual DbSet<Sticker> Stickers { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<Tarotcard> Tarotcards { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Blind>(entity =>
        {
            entity.HasKey(e => e.IdBlind).HasName("PRIMARY");
        });

        modelBuilder.Entity<Boosterpack>(entity =>
        {
            entity.HasKey(e => new { e.IdJoker, e.IdTarot, e.IdSpectral, e.NumCard })
                .HasName("PRIMARY")
                .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0, 0, 0 });

            entity.HasOne(d => d.IdJokerNavigation).WithMany(p => p.Boosterpacks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_joker");

            entity.HasOne(d => d.IdSpectralNavigation).WithMany(p => p.Boosterpacks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_spectral");

            entity.HasOne(d => d.IdTarotNavigation).WithMany(p => p.Boosterpacks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tarot");

            entity.HasOne(d => d.NumCardNavigation).WithMany(p => p.Boosterpacks)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_card");
        });

        modelBuilder.Entity<Card>(entity =>
        {
            entity.HasKey(e => e.NumCard).HasName("PRIMARY");
        });

        modelBuilder.Entity<Deck>(entity =>
        {
            entity.HasKey(e => e.IdDeck).HasName("PRIMARY");
        });

        modelBuilder.Entity<Edition>(entity =>
        {
            entity.HasKey(e => e.IdEdition).HasName("PRIMARY");
        });

        modelBuilder.Entity<Enhancedcard>(entity =>
        {
            entity.HasKey(e => e.IdEnhanced).HasName("PRIMARY");
        });

        modelBuilder.Entity<Joker>(entity =>
        {
            entity.HasKey(e => e.IdJoker).HasName("PRIMARY");
        });

        modelBuilder.Entity<Planetcard>(entity =>
        {
            entity.HasKey(e => e.IdPlanet).HasName("PRIMARY");
        });

        modelBuilder.Entity<Seal>(entity =>
        {
            entity.HasKey(e => e.IdSeal).HasName("PRIMARY");
        });

        modelBuilder.Entity<Spectralcard>(entity =>
        {
            entity.HasKey(e => e.IdSpectral).HasName("PRIMARY");
        });

        modelBuilder.Entity<Sticker>(entity =>
        {
            entity.HasKey(e => e.IdSticker).HasName("PRIMARY");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.IdTag).HasName("PRIMARY");
        });

        modelBuilder.Entity<Tarotcard>(entity =>
        {
            entity.HasKey(e => e.IdTarot).HasName("PRIMARY");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.IdVoucher).HasName("PRIMARY");
        });

        OnModelCreatingPartial(modelBuilder);

        base.OnModelCreating(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}