// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using BalatroWikiApp.Data;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace BalatroWikiApp.Models;

public partial class BalatroDBContext : IdentityDbContext<ApplicationUser>
{
    public BalatroDBContext(DbContextOptions<BalatroDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Blind> Blinds { get; set; }

    public virtual DbSet<Boosterpack> Boosterpacks { get; set; }

    public virtual DbSet<Card> Cards { get; set; }

    public virtual DbSet<Deck> Decks { get; set; }

    public virtual DbSet<Edition> Editions { get; set; }

    public virtual DbSet<Enhancedcard> Enhancedcards { get; set; }

    public virtual DbSet<Joker> Jokers { get; set; }

    public virtual DbSet<Planetcard> Planetcards { get; set; }

    public virtual DbSet<Seal> Seals { get; set; }

    public virtual DbSet<Spectralcard> Spectralcards { get; set; }

    public virtual DbSet<Sticker> Stickers { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<Tarotcard> Tarotcards { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder
            .UseCollation("utf8mb4_0900_ai_ci")
            .HasCharSet("utf8mb4");

        modelBuilder.Entity<Blind>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Boosterpack>(entity =>
        {
            entity.HasKey(e => new { e.Id })
                .HasName("PRIMARY");

            entity.HasOne(d => d.Joker).WithMany(p => p.Boosterpacks)
                .HasForeignKey(d => d.IdJoker)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Spectral).WithMany(p => p.Boosterpacks)
                .HasForeignKey(d => d.IdSpectral)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Tarot).WithMany(p => p.Boosterpacks)
                .HasForeignKey(d => d.IdTarot)
                .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(d => d.Card).WithMany(p => p.Boosterpacks)
                .HasForeignKey(d => d.IdCard)
                .OnDelete(DeleteBehavior.ClientSetNull);

        });

        modelBuilder.Entity<Card>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Deck>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Edition>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Enhancedcard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Joker>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Planetcard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Seal>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Spectralcard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Sticker>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Tarotcard>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.Id).HasName("PRIMARY");
        });

        OnModelCreatingPartial(modelBuilder);

        base.OnModelCreating(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}