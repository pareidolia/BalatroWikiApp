// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>

using BalatroWikiApp.Data;
using Microsoft.AspNetCore.Identity.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore;
using System;
using System.Collections.Generic;

namespace BalatroWikiApp.Models;

public partial class BalatroDBContext : IdentityDbContext<ApplicationUser>
{
    public BalatroDBContext(DbContextOptions<BalatroDBContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Blind> Blinds { get; set; }

    public virtual DbSet<Boosterpack> Boosterpacks { get; set; }

    public virtual DbSet<Card> Cards { get; set; }

    public virtual DbSet<Consumable> Consumables { get; set; }

    public virtual DbSet<Deck> Decks { get; set; }

    public virtual DbSet<Edition> Editions { get; set; }

    public virtual DbSet<Enhancedcard> Enhancedcards { get; set; }

    public virtual DbSet<Hand> Hands { get; set; }

    public virtual DbSet<Joker> Jokers { get; set; }

    public virtual DbSet<OtherEffect> OtherEffects { get; set; }

    public virtual DbSet<Seal> Seals { get; set; }

    public virtual DbSet<Sticker> Stickers { get; set; }

    public virtual DbSet<Tag> Tags { get; set; }

    public virtual DbSet<Voucher> Vouchers { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        base.OnModelCreating(modelBuilder);
        modelBuilder.Entity<Blind>(entity =>
        {
            entity.HasKey(e => e.Id);
        });

        modelBuilder.Entity<Boosterpack>(entity =>
        {
            entity.HasKey(e => new { e.Id });

            entity.Property(e => e.TypeBoosterpack)
            .HasConversion<string>()
            .IsRequired();

        });

        modelBuilder.Entity<Card>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.HasOne(d => d.NameEnhanced).WithMany(p => p.Cards)
                .HasForeignKey(d => d.IdEnhancedcard)
                .OnDelete(DeleteBehavior.ClientSetNull);

        });

        modelBuilder.Entity<Consumable>(entity =>
        {
            entity.HasKey(e => e.Id);

            entity.HasOne(c => c.Hand).WithOne(h => h.Consumable)
            .HasForeignKey<Consumable>(c => c.IdHand)
            .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(c => c.Seal).WithOne(h => h.Consumable)
            .HasForeignKey<Consumable>(c => c.IdSeal)
            .OnDelete(DeleteBehavior.ClientSetNull);

            entity.HasOne(c => c.Enhancedcard).WithOne(h => h.Consumable)
            .HasForeignKey<Consumable>(c => c.IdEnhancedcard)
            .OnDelete(DeleteBehavior.ClientSetNull);


        });


        modelBuilder.Entity<Deck>(entity =>
        {
            entity.HasKey(e => e.Id);
        });

        modelBuilder.Entity<Edition>(entity =>
        {
            entity.HasKey(e => e.Id);
        });

        modelBuilder.Entity<Enhancedcard>(entity =>
        {
            entity.HasKey(e => e.Id);
        });

        modelBuilder.Entity<Hand>(entity =>
        {
            entity.HasKey(e => e.Id);
        });

        modelBuilder.Entity<Joker>(entity =>
        {
            entity.HasKey(e => e.Id);
        });

        modelBuilder.Entity<OtherEffect>(entity =>
        {
            entity.HasKey(e => e.Id);
        });

        modelBuilder.Entity<Seal>(entity =>
        {
            entity.HasKey(e => e.Id);
        });

        modelBuilder.Entity<Sticker>(entity =>
        {
            entity.HasKey(e => e.Id);
        });

        modelBuilder.Entity<Tag>(entity =>
        {
            entity.HasKey(e => e.Id);
        });

        modelBuilder.Entity<Voucher>(entity =>
        {
            entity.HasKey(e => e.Id);
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}