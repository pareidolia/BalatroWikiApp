// <auto-generated />
using System;
using BalatroWikiApp.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace BalatroWikiApp.Migrations
{
    [DbContext(typeof(BalatroDBContext))]
    [Migration("20250627162431_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("BalatroWikiApp.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("integer");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("boolean");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("boolean");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("text");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("text");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("boolean");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("text");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("boolean");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Blind", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("AnteBlind")
                        .HasColumnType("integer")
                        .HasColumnName("anteBlind");

                    b.Property<string>("DescriptionBlind")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("descriptionBlind");

                    b.Property<string>("EffectBlind")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("effectBlind");

                    b.Property<string>("ImageBlind")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageBlind");

                    b.Property<string>("NameBlind")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nameBlind");

                    b.Property<int>("RewardBlind")
                        .HasColumnType("integer")
                        .HasColumnName("rewardBlind");

                    b.HasKey("Id");

                    b.ToTable("blinds");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Boosterpack", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionPack")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("descriptionPack");

                    b.Property<string>("ImageBoosterpack")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageBoosterpack");

                    b.Property<string>("NamePack")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("namePack");

                    b.Property<int>("NumberChoices")
                        .HasColumnType("integer")
                        .HasColumnName("numberChoices");

                    b.Property<int>("NumberPack")
                        .HasColumnType("integer")
                        .HasColumnName("numberPack");

                    b.Property<int>("NumberProposition")
                        .HasColumnType("integer")
                        .HasColumnName("numberProposition");

                    b.Property<int>("PricePack")
                        .HasColumnType("integer")
                        .HasColumnName("pricePack");

                    b.Property<int>("Type")
                        .HasMaxLength(50)
                        .HasColumnType("integer")
                        .HasColumnName("typePack");

                    b.Property<string>("TypeBoosterpack")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("boosterpack");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Card", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("FamilyCard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("familyCard");

                    b.Property<int?>("IdEnhancedcard")
                        .HasColumnType("integer")
                        .HasColumnName("idEnhancedcard");

                    b.Property<string>("ImageCard")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageCard");

                    b.Property<bool>("IsEnhanced")
                        .HasColumnType("boolean")
                        .HasColumnName("isEnhanced");

                    b.Property<string>("NameCard")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nameCard");

                    b.HasKey("Id");

                    b.HasIndex("IdEnhancedcard");

                    b.ToTable("cards");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Consumable", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EffectConsumable")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("effectConsumable");

                    b.Property<int?>("IdEnhancedcard")
                        .HasColumnType("integer")
                        .HasColumnName("idEnhancedcard");

                    b.Property<int?>("IdHand")
                        .HasColumnType("integer")
                        .HasColumnName("idHand");

                    b.Property<int?>("IdSeal")
                        .HasColumnType("integer")
                        .HasColumnName("idSeal");

                    b.Property<string>("ImageConsumable")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageConsumable");

                    b.Property<string>("NameConsumable")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nameConsumable");

                    b.Property<int>("TypeConsumable")
                        .HasColumnType("integer")
                        .HasColumnName("typeConsumable");

                    b.Property<int>("TypeOtherEffect")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("IdEnhancedcard")
                        .IsUnique();

                    b.HasIndex("IdHand")
                        .IsUnique();

                    b.HasIndex("IdSeal")
                        .IsUnique();

                    b.ToTable("consumables");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Deck", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionDeck")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("descriptionDeck");

                    b.Property<string>("ImageDeck")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageDeck");

                    b.Property<string>("NameDeck")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nameDeck");

                    b.HasKey("Id");

                    b.ToTable("decks");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Edition", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EffectEdition")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("effectEdition");

                    b.Property<string>("ImageEdition")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageEdition");

                    b.Property<string>("NameEdition")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nameEdition");

                    b.HasKey("Id");

                    b.ToTable("editions");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Enhancedcard", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EffectEnhanced")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("effectEnhanced");

                    b.Property<string>("ImageEnhancedcard")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageEnhancedcard");

                    b.Property<string>("NameEnhanced")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nameEnhanced");

                    b.Property<string>("TypeEnhanced")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("typeEnhanced");

                    b.HasKey("Id");

                    b.ToTable("enhancedcards");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Hand", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<int>("BaseChips")
                        .HasColumnType("integer")
                        .HasColumnName("baseChips");

                    b.Property<int>("BaseMult")
                        .HasColumnType("integer")
                        .HasColumnName("baseMult");

                    b.Property<string>("ImageHand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageHand");

                    b.Property<string>("NameHand")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nameHand");

                    b.HasKey("Id");

                    b.ToTable("hands");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Joker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionJoker")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("descriptionJoker");

                    b.Property<bool>("HasFaceJoker")
                        .HasColumnType("boolean")
                        .HasColumnName("hasFaceJoker");

                    b.Property<string>("ImageJoker")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageJoker");

                    b.Property<string>("NameJoker")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("nameJoker");

                    b.Property<int>("NumberJoker")
                        .HasColumnType("integer")
                        .HasColumnName("numberJoker");

                    b.Property<int>("PriceJoker")
                        .HasColumnType("integer")
                        .HasColumnName("priceJoker");

                    b.Property<string>("RarityJoker")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("character varying(30)")
                        .HasColumnName("rarityJoker");

                    b.Property<decimal?>("SizeJoker")
                        .HasPrecision(3, 2)
                        .HasColumnType("numeric(3,2)")
                        .HasColumnName("sizeJoker");

                    b.Property<string>("TypeJoker")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("typeJoker");

                    b.HasKey("Id");

                    b.ToTable("jokers");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Seal", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EffectSeal")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("effectSeal");

                    b.Property<string>("ImageSeal")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageSeal");

                    b.Property<string>("NameSeal")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)")
                        .HasColumnName("nameSeal");

                    b.Property<int>("TypeSeal")
                        .HasColumnType("integer")
                        .HasColumnName("typeSeal");

                    b.HasKey("Id");

                    b.ToTable("seals");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Sticker", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionSticker")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("descriptionSticker");

                    b.Property<string>("EffectSticker")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("effectSticker");

                    b.Property<string>("ImageSticker")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageSticker");

                    b.Property<string>("NameSticker")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nameSticker");

                    b.HasKey("Id");

                    b.ToTable("sticker");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Tag", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("EffectTag")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("effectTag");

                    b.Property<string>("ImageTag")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageTag");

                    b.Property<string>("NameTag")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nameTag");

                    b.HasKey("Id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Voucher", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasColumnName("id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("DescriptionVoucher")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)")
                        .HasColumnName("descriptionVoucher");

                    b.Property<string>("ImageVoucher")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)")
                        .HasColumnName("imageVoucher");

                    b.Property<string>("NameVoucher")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)")
                        .HasColumnName("nameVoucher");

                    b.Property<int>("PriceVoucher")
                        .HasColumnType("integer")
                        .HasColumnName("priceVoucher");

                    b.Property<bool>("StateVoucher")
                        .HasColumnType("boolean")
                        .HasColumnName("stateVoucher");

                    b.HasKey("Id");

                    b.ToTable("vouchers");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("text");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("character varying(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("text");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("text");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("text");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("RoleId")
                        .HasColumnType("text");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("text");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Value")
                        .HasColumnType("text");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Card", b =>
                {
                    b.HasOne("BalatroWikiApp.Models.Enhancedcard", "NameEnhanced")
                        .WithMany("Cards")
                        .HasForeignKey("IdEnhancedcard");

                    b.Navigation("NameEnhanced");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Consumable", b =>
                {
                    b.HasOne("BalatroWikiApp.Models.Enhancedcard", "Enhancedcard")
                        .WithOne("Consumable")
                        .HasForeignKey("BalatroWikiApp.Models.Consumable", "IdEnhancedcard");

                    b.HasOne("BalatroWikiApp.Models.Hand", "Hand")
                        .WithOne("Consumable")
                        .HasForeignKey("BalatroWikiApp.Models.Consumable", "IdHand");

                    b.HasOne("BalatroWikiApp.Models.Seal", "Seal")
                        .WithOne("Consumable")
                        .HasForeignKey("BalatroWikiApp.Models.Consumable", "IdSeal");

                    b.Navigation("Enhancedcard");

                    b.Navigation("Hand");

                    b.Navigation("Seal");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("BalatroWikiApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("BalatroWikiApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("BalatroWikiApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("BalatroWikiApp.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Enhancedcard", b =>
                {
                    b.Navigation("Cards");

                    b.Navigation("Consumable");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Hand", b =>
                {
                    b.Navigation("Consumable");
                });

            modelBuilder.Entity("BalatroWikiApp.Models.Seal", b =>
                {
                    b.Navigation("Consumable");
                });
#pragma warning restore 612, 618
        }
    }
}
