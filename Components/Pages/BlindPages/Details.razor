@page "/blinds/details"
@using Microsoft.EntityFrameworkCore
@using BalatroWikiApp.Models
@inject IDbContextFactory<BalatroWikiApp.Models.BalatroDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Details</PageTitle>

<h1>Details</h1>

<div>
    <h2>Blind</h2>
    <hr />
    @if (blind is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">NameBlind</dt>
            <dd class="col-sm-10">@blind.NameBlind</dd>
            <dt class="col-sm-2">AnteBlind</dt>
            <dd class="col-sm-10">@blind.AnteBlind</dd>
            <dt class="col-sm-2">DescriptionBlind</dt>
            <dd class="col-sm-10">@blind.DescriptionBlind</dd>
            <dt class="col-sm-2">EffectBlind</dt>
            <dd class="col-sm-10">@blind.EffectBlind</dd>
            <dt class="col-sm-2">RewardBlind</dt>
            <dd class="col-sm-10">@blind.RewardBlind</dd>
            <dt class="col-sm-2">ImageBlind</dt>
            <dd class="col-sm-10">@blind.ImageBlind</dd>
        </dl>
        <div>
            <a href="@($"/blinds/edit?id={blind.Id}")">Edit</a> |
            <a href="@($"/blinds")">Back to List</a>
        </div>
    }
</div>

@code {
    private Blind? blind;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        blind = await context.Blinds.FirstOrDefaultAsync(m => m.Id == Id);

        if (blind is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }
}
