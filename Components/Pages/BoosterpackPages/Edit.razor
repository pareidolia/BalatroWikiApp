@page "/boosterpacks/edit"
@using Microsoft.EntityFrameworkCore
@using BalatroWikiApp.Models
@inject IDbContextFactory<BalatroWikiApp.Models.BalatroDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Boosterpack</h2>
<hr />
@if (Boosterpack is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Boosterpack" OnValidSubmit="UpdateBoosterpack" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Boosterpack.Id" value="@Boosterpack.Id" />
                <div class="mb-3">
                    <label for="idjoker" class="form-label">IdJoker:</label>
                    <InputNumber id="idjoker" @bind-Value="Boosterpack.IdJoker" class="form-control" />
                    <ValidationMessage For="() => Boosterpack.IdJoker" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="idtarot" class="form-label">IdTarot:</label>
                    <InputNumber id="idtarot" @bind-Value="Boosterpack.IdTarot" class="form-control" />
                    <ValidationMessage For="() => Boosterpack.IdTarot" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="idspectral" class="form-label">IdSpectral:</label>
                    <InputNumber id="idspectral" @bind-Value="Boosterpack.IdSpectral" class="form-control" />
                    <ValidationMessage For="() => Boosterpack.IdSpectral" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="idcard" class="form-label">IdCard:</label>
                    <InputNumber id="idcard" @bind-Value="Boosterpack.IdCard" class="form-control" />
                    <ValidationMessage For="() => Boosterpack.IdCard" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="namepack" class="form-label">NamePack:</label>
                    <InputText id="namepack" @bind-Value="Boosterpack.NamePack" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Boosterpack.NamePack" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="numberpack" class="form-label">NumberPack:</label>
                    <InputNumber id="numberpack" @bind-Value="Boosterpack.NumberPack" class="form-control" />
                    <ValidationMessage For="() => Boosterpack.NumberPack" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="numberchoices" class="form-label">NumberChoices:</label>
                    <InputNumber id="numberchoices" @bind-Value="Boosterpack.NumberChoices" class="form-control" />
                    <ValidationMessage For="() => Boosterpack.NumberChoices" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="numberproposition" class="form-label">NumberProposition:</label>
                    <InputNumber id="numberproposition" @bind-Value="Boosterpack.NumberProposition" class="form-control" />
                    <ValidationMessage For="() => Boosterpack.NumberProposition" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="descriptionpack" class="form-label">DescriptionPack:</label>
                    <InputText id="descriptionpack" @bind-Value="Boosterpack.DescriptionPack" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Boosterpack.DescriptionPack" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="pricepack" class="form-label">PricePack:</label>
                    <InputNumber id="pricepack" @bind-Value="Boosterpack.PricePack" class="form-control" />
                    <ValidationMessage For="() => Boosterpack.PricePack" class="text-danger" />
                </div>
                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/boosterpacks">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Boosterpack? Boosterpack { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        Boosterpack ??= await context.Boosterpacks.FirstOrDefaultAsync(m => m.Id == Id);

        if (Boosterpack is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateBoosterpack()
    {
        using var context = DbFactory.CreateDbContext();
        context.Attach(Boosterpack!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!BoosterpackExists(Boosterpack!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/boosterpacks");
    }

    private bool BoosterpackExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Boosterpacks.Any(e => e.Id == id);
    }
}
