@page "/tarotcards/delete"
@using Microsoft.EntityFrameworkCore
@using BalatroWikiApp.Models
@inject IDbContextFactory<BalatroWikiApp.Models.BalatroDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Tarotcard</h2>
    <hr />
    @if (tarotcard is null)
    {
        <p><em>Loading...</em></p>
    }
    else {
        <dl class="row">
            <dt class="col-sm-2">NameTarot</dt>
            <dd class="col-sm-10">@tarotcard.NameTarot</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EffectTarot</dt>
            <dd class="col-sm-10">@tarotcard.EffectTarot</dd>
        </dl>
        <EditForm method="post" Model="tarotcard" OnValidSubmit="DeleteTarotcard" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(tarotcard is null)">Delete</button> |
            <a href="/tarotcards">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Tarotcard? tarotcard;

    [SupplyParameterFromQuery]
    private int IdTarot { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        tarotcard = await context.Tarotcards.FirstOrDefaultAsync(m => m.IdTarot == IdTarot);

        if (tarotcard is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteTarotcard()
    {
        using var context = DbFactory.CreateDbContext();
        context.Tarotcards.Remove(tarotcard!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/tarotcards");
    }
}
