@page "/cards/edit"
@using Microsoft.EntityFrameworkCore
@using BalatroWikiApp.Models
@inject IDbContextFactory<BalatroWikiApp.Models.BalatroDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>

<h2>Card</h2>
<hr />
@if (Card is null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">
            <EditForm method="post" Model="Card" OnValidSubmit="UpdateCard" FormName="edit" Enhance>
                <DataAnnotationsValidator />
                <ValidationSummary role="alert"/>
                <input type="hidden" name="Card.Id" value="@Card.Id" />
                <div class="mb-3">
                    <label for="namecard" class="form-label">NameCard:</label>
                    <InputText id="namecard" @bind-Value="Card.NameCard" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Card.NameCard" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="familycard" class="form-label">FamilyCard:</label>
                    <InputText id="familycard" @bind-Value="Card.FamilyCard" class="form-control" aria-required="true"/>
                    <ValidationMessage For="() => Card.FamilyCard" class="text-danger" />
                </div>
                <div class="mb-3">
                    <label for="isenhanced" class="form-label">IsEnhanced:</label>
                    <InputCheckbox id="isenhanced" @bind-Value="Card.IsEnhanced" class="form-check-input" />
                    <ValidationMessage For="() => Card.IsEnhanced" class="text-danger" />
                </div>

                @if (Card.IsEnhanced == true)
                {
                    <div class="mb-3">
                        <label for="idenhancedcard" class="form-label">Enhancedcard:</label>
                        <InputSelect id="idenhancedcard" @bind-Value="Card.IdEnhancedcard">
                            <option selected value="">Sélectionner une amélioration</option>
                            @foreach (var enhancement in _enhancements)
                            {
                                <option value="@enhancement.Id">@enhancement.NameEnhanced</option>
                            }
                        </InputSelect>
                    </div>
                }

                <button type="submit" class="btn btn-primary">Save</button>
            </EditForm>
        </div>
    </div>
}

<div>
    <a href="/cards">Back to List</a>
</div>

@code {
    [SupplyParameterFromQuery]
    private int Id { get; set; }

    [SupplyParameterFromForm]
    private Card? Card { get; set; }
    private List<Enhancedcard> _enhancements = new();

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        _enhancements = context.Enhancedcards.ToList();

        Card ??= await context.Cards.FirstOrDefaultAsync(m => m.Id == Id);

        if (Card is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    // To protect from overposting attacks, enable the specific properties you want to bind to.
    // For more information, see https://learn.microsoft.com/aspnet/core/blazor/forms/#mitigate-overposting-attacks.
    private async Task UpdateCard()
    {
        if (Card.IsEnhanced)
        {
            if (Card.IdEnhancedcard == null)
            {
                Card.IsEnhanced = false;
            }
        }
        else
        {
            if (Card.IdEnhancedcard != null)
            {
                Card.IdEnhancedcard = null;
            }

        }
        using var context = DbFactory.CreateDbContext();
        context.Entry(Card!).Property(b => b.IdEnhancedcard).IsModified = true;
        context.Attach(Card!).State = EntityState.Modified;

        try
        {
            await context.SaveChangesAsync();
        }
        catch (DbUpdateConcurrencyException)
        {
            if (!CardExists(Card!.Id))
            {
                NavigationManager.NavigateTo("notfound");
            }
            else
            {
                throw;
            }
        }

        NavigationManager.NavigateTo("/cards");
    }

    private bool CardExists(int id)
    {
        using var context = DbFactory.CreateDbContext();
        return context.Cards.Any(e => e.Id == id);
    }
}
