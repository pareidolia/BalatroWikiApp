@page "/consumables/delete"
@using Microsoft.EntityFrameworkCore
@using BalatroWikiApp.Models
@inject IDbContextFactory<BalatroDBContext> DbFactory
@inject NavigationManager NavigationManager

<PageTitle>Delete</PageTitle>

<h1>Delete</h1>

<p>Are you sure you want to delete this?</p>
<div>
    <h2>Consumable</h2>
    <hr />
    @if (consumable is null)
    {
        <p><em>Loading...</em></p>
    }
    else {

        <dl class="row">
            <dt class="col-sm-2">NameConsumable</dt>
            <dd class="col-sm-10">@consumable.NameConsumable</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">TypeConsumable</dt>
            <dd class="col-sm-10">@consumable.TypeConsumable</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">EffectConsumable</dt>
            <dd class="col-sm-10">@consumable.EffectConsumable</dd>
        </dl>
        <dl class="row">
            <dt class="col-sm-2">ImageConsumable</dt>
            <dd class="col-sm-10">@consumable.ImageConsumable</dd>
        </dl>
        <EditForm method="post" Model="consumable" OnValidSubmit="DeleteConsumable" FormName="delete" Enhance>
            <button type="submit" class="btn btn-danger" disabled="@(consumable is null)">Delete</button> |
            <a href="/consumables">Back to List</a>
        </EditForm>
    }
</div>

@code {
    private Consumable? consumable;

    [SupplyParameterFromQuery]
    private int Id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        using var context = DbFactory.CreateDbContext();
        consumable = await context.Consumables.FirstOrDefaultAsync(m => m.Id == Id);

        if (consumable is null)
        {
            NavigationManager.NavigateTo("notfound");
        }
    }

    private async Task DeleteConsumable()
    {
        using var context = DbFactory.CreateDbContext();
        context.Consumables.Remove(consumable!);
        await context.SaveChangesAsync();
        NavigationManager.NavigateTo("/consumables");
    }
}
